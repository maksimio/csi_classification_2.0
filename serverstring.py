from numpy import zeros, array
from struct import unpack
from numba import njit
import io

@njit(cache=True)
def __signbit_convert(data: int) -> int:
    if data & 512:
        data -= 1024
    return data


@njit(cache=True)
def _read_csi_native(local_h: int, nr: int, nc: int, num_tones: int) -> list:
    csi_re = zeros((nr * nc, num_tones))
    csi_im = zeros((nr * nc, num_tones))

    BITS_PER_BYTE = 8
    BITS_PER_SYMBOL = 10
    bits_left = 16

    h_data = local_h[0] + (local_h[1] << BITS_PER_BYTE)
    current_data = h_data & 65535
    idx = 2

    for k in range(num_tones):
        for nc_idx in range(nc):
            for nr_idx in range(nr):
                if bits_left < BITS_PER_SYMBOL:
                    h_data = local_h[idx] + (local_h[idx + 1] << BITS_PER_BYTE)
                    idx += 2
                    current_data += h_data << bits_left
                    bits_left += 16
                
                imag = current_data & 1023
                bits_left -= BITS_PER_SYMBOL
                current_data = current_data >> BITS_PER_SYMBOL

                if bits_left < BITS_PER_SYMBOL:
                    h_data = local_h[idx] + (local_h[idx + 1] << BITS_PER_BYTE)
                    idx += 2
                    current_data += h_data << bits_left
                    bits_left += 16

                real = current_data & 1023
                bits_left -= BITS_PER_SYMBOL
                current_data = current_data >> BITS_PER_SYMBOL

                csi_re[nr_idx + nc_idx * 2, k] = __signbit_convert(real)
                csi_im[nr_idx + nc_idx * 2, k] = __signbit_convert(imag)

    return csi_re, csi_im

def __read_csi(csi_buf: list, nr: int, nc: int, num_tones: int) -> dict:
    csi_re, csi_im = _read_csi_native(csi_buf, nr, nc, num_tones)
    return array([csi_re[i] + 1j * csi_im[i] for i in range(nr * nc)])


def read(data):
  f = io.BytesIO(data)

  csi_matrix = {}
  csi_matrix['timestamp'], csi_matrix['csi_len'], csi_matrix['tx_channel'], csi_matrix['err_info'], csi_matrix['noise_floor'], csi_matrix['rate'],  csi_matrix['bandWitdh'], csi_matrix['num_tones'],  csi_matrix['nr'], csi_matrix['nc'], csi_matrix['rssi0'], csi_matrix['rssi1'], csi_matrix['rssi2'], csi_matrix['rssi3'], csi_matrix['payload_len'] = unpack('>QHHBBBBBBBBBBBH', f.read(25))

  if csi_matrix['csi_len']:
      buf = unpack('B' * csi_matrix['csi_len'], f.read(csi_matrix['csi_len']))
      csi_matrix['csi'] = __read_csi(buf, csi_matrix['nr'], csi_matrix['nc'], csi_matrix['num_tones'])
  else:
      csi_matrix['csi'] = [] 
                
  csi_matrix['payload'] = unpack('B' * csi_matrix['payload_len'], f.read(csi_matrix['payload_len']))
  
  return csi_matrix

# root@OpenWrt:~# client_main 192.168.1.203 9090
# Waiting for the connection!
# Connection with server is built!
# # Receiving data! Press Ctrl+c to quit!
# cnt is:1143
# Big-endian
# CPU is BigEndian and we SWAP!
# data len:1996750848
# data_len_local is:1143
# We have sent 1143 bytes!
# Recv 1th msg with rate: 0x8f | payload len: 556
# ========  Bsic Information of the Transmission ==========
# csi_len= 560 |chanBW= 0   |num_tones= 56  |nr= 2  |nc= 2
# rssi= 69  |rssi_0= 59  |rssi_1= 69  |rssi_2= 128
data = b'\x00\x00\x00\x00)\xab\x12\x13\x020\t\x9e\x00\x00\x8f\x008\x02\x02E;E\x80\x02,\x98\xa0M\x82\x03\xf6\x1b0;\x05\xa2\x98\x8d\x82\x03\xf5\'\xd0z\x04\xad\xa4}\x02\x04\xee\x1b\xb0:\x04\xb8\xa8\x9d\x02\x04\xec\x17p\xba\x03\xba\xa8\x9d\xc2\x04\xebO@\xba\x03\xc1\xb8\xad\x02\x05\xe4C\x00z\x02\xc0\xc8\xadB\x05\xe4?\x10\xba\x02\xc9\xc4\xcd\x82\x04\xe3C\x00z\x03\xc7\xcc\xbd\x02\x05\xe0?\x00z\x03\xc5\xc8\xed\xc2\x04\xdfS\xf0y\x04\xc1\xbc\xed\xc2\x04\xddK\x00z\x04\xbd\xb0\rC\x04\xdcw\xd09\x04\xc0\xa4-\x03\x04\xd7[\xd0\xf9\x04\xba\xb8\r\x03\x04\xd7k\xf0y\x05\xb1\x98\x1d\x03\x04\xd7\x7f\xe09\x06\xa8\x90=\x83\x03\xd6\x83\x00z\x06\xa1\x80]\x03\x03\xd7\x9f\x10\xfa\x07\xa4`]C\x02\xd3\x8f z\x08\x99P]C\x01\xd5\xa3P\xfa\t\x90H}C\x01\xd6\xbb`\xfa\n\x88,m\xc3\x00\xd6\xcb`\xba\n}\x14\x8d\xc3\xff\xd8\xe7\x90z\x0cs\x08}\x83\xff\xd8\xdf\xe0:\rh\x00\x8d\x83\xfe\xda\xfb\xe0\xba\x0ei\xf0|\x03\xfe\xdb\x07!\xfb\x0f^\xe4\xac\xc3\xfd\xdf#!\xbb\x0fS\xe0\x8c\x83\xfc\xe3/a\xfb\x10H\xc8\x8cC\xfb\xe1C\xc1{\x128\xc8LC\xfa\xecW\x11\xfc\x13)\xbcl\xc3\xf9\xebkA\xfc\x13"\xc0\x8cC\xf9\xf2s\x81\xfc\x14\x1d\xb0L\x83\xf8\xf3\x8b\xc1\xfc\x15\n\xb4\\\x83\xf7\xfd\x87\x11=\x16\x06\xb0\\\xc3\xf6\x05\x90a\xbd\x16\xf9\xbf<C\xf6\x06\x9c\x91\xfd\x17\xf1\xc3\x1c\xc3\xf5\x0e\xb0\xf1\xfd\x17\xf1\xc3\x1c\x03\xf5\x10\xa4A~\x18\xe9\xbf\xfcB\xf5\x13\xb8a>\x18\xe6\xbf\xecB\xf4\x19\xc0\xc1\xbe\x18\xdb\xd3\xfc\x02\xf4\x1e\xb4\xf1~\x18\xd7\xdb\xdc\x82\xf3#\xb8!\xbf\x18\xcd\xf3\xbc\x82\xf2,\xbca\xbf\x18\xc9\xdb\xbc\x82\xf2/\xc0\xb1\x7f\x19\xc5\xf7\x9c\x82\xf24\xbc\xc1\x7f\x19\xbe\xef\xbc\x02\xf2<\xd4\xf1\xbf\x19\xc1\xf3\x8c\xc2\xf1>\xd0\x11@\x19\xbe\xfb|\xc2\xf1A\xd8!@\x19\xbf\xf7\x8c\xc2\xf1C\xd4Q\x80\x18\xbe\xf7\x9cB\xf1E\xd8a@\x19\xb9\x0b\x9d\x02\xf1J\xc4a\x80\x18\xbe\x07\xad\x82\xf1N\xe4Q\x00\x19\xc5\x0f\xcd\x02\xf2E\xe01\x00\x18\xcc\x03\xbdB\xf2G\xd8Q\x80\x17\xd5\x1b\xbdB\xf3F\xe41\x00\x17\xd7C\xdd\xc2\xf3>\xdc\xf1\xbf\x15\xe3S\xed\xc2\xf49\xd4\xc1?\x15\x88A,\x00\xc0J\x00\n4t\xc4n\x1f\x84\xa6(\x00\x7f]>J\x00P\x00\x05\x00P\x19\x19\x00\x00 \x00\x00\x00\x00\xaa\xaa\x03\x00\x00\x00\x08\x00\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa\xaa_\xe6\xf1pg\xf5K\xb9M\x1b$\xd4\x04u'
print('start')
res = read(data)
print('stop')
a = 3
